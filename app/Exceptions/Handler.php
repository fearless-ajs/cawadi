<?php

namespace App\Exceptions;

use App\Traits\ApiResponser;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Session\TokenMismatchException;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    use ApiResponser;
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }



    public function render($request, Throwable $e)
    {
        //For returning form validation error as json
        if ($e instanceof ValidationException){
            return $this->convertValidationExceptionToResponse($e, $request);
        }

        //For returning model instance not found as a json
        if ($e instanceof ModelNotFoundException){
            $modelName = strtolower(class_basename($e->getModel()));
            return $this->errorResponse("{$modelName} specified does not exist", 404);
        }

        //For returning URL not found as a json
        if ($e instanceof NotFoundHttpException){
            //404 error code means not found
            return $this->errorResponse('The specified URL doesn\'t exist', 404);
        }

        //For returning http method does not exist for a route.
        if ($e instanceof MethodNotAllowedHttpException){
            //405 error code means http method not allow
            return $this->errorResponse('The specified method for the request is invalid', 405);
        }

        //For returning authorization error
        if($e instanceof AuthorizationException){
            //403 error code means unauthorized
            return $this->errorResponse($e->getMessage(), 403);
        }

        //For returning authentication error as json
        if ($e instanceof AuthenticationException){
            return $this->unauthenticated($request, $e);
        }

        /*
         * For other http exception this restful api could possibly have
         * That we've not specified in our handlers
         */
        if($e instanceof HttpException){
            return $this->errorResponse($e->getMessage(), $e->getStatusCode());
        }

        //For handing errors related to database
        if($e instanceof QueryException){
            //409 code means conflict
            $errorCode = $e->errorInfo[1];

            if ($errorCode == 1415){
                return $this->errorResponse('Cannot remove this resource permanently, it\'s related to other resource', 409);
            }
        }

        if($e instanceof TokenMismatchException){
            return redirect()->back()->withInput($request->input());
        }

        //For handling unexpected errors, the ones not specified above
        //Check if the API is in debug model to avoid sharing vital information to users
        if(config('app.debug')){
            return parent::render($request, $e);
        }
        // 500 code means server error
        return $this->errorResponse('Unexpected Exception', 500);

    }


    public function unauthenticated($request, AuthenticationException $exception)
    {
        if ($this->isFrontEnd($request)){
            return redirect()->guest('login');
        }
        return $this->errorResponse('Unauthenticated', 401);
//        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
    }

    /**
     * Create a response object from the given validation exception.
     *
     * @param  \Illuminate\Validation\ValidationException  $e
     * @param  \Illuminate\Http\Request  $request
     * @return \Symfony\Component\HttpFoundation\Response
     */
    protected function convertValidationExceptionToResponse(ValidationException $e, $request)
    {
        $errors = $e->validator->errors()->getMessages();
        if ($this->isFrontEnd($request)){
            return $request->ajax() ? response()->json($errors, 422) : redirect()
                ->back()
                ->withInput($request->all())
                ->withErrors($errors);
        }
        return $this->errorResponse($errors, 422);
    }


    //Check if request is coming from the web or API
    public function isFrontEnd($request)
    {
        return $request->acceptsHtml() && collect($request->route()->middleware())->contains('web');
    }

}
